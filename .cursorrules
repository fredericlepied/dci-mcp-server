# DCI MCP Server - Cursor Rules

## Python Dependency Management

**ALWAYS** make Python dependency changes in `pyproject.toml` and use `uv` to make them effective:

1. **Add dependencies**: Edit `pyproject.toml` under the `dependencies` list
2. **Remove dependencies**: Remove from `pyproject.toml` dependencies list
3. **Update dependencies**: Modify version constraints in `pyproject.toml`
4. **Apply changes**: Run `uv sync` to update the virtual environment and lock file

### Example workflow:

```bash
# 1. Edit pyproject.toml to add/remove/update dependencies
# 2. Run uv sync to apply changes
uv sync
# 3. Verify the changes took effect
uv run python -c "import new_package; print('Success')"
```

### Never:

- Use `pip install` directly
- Edit `uv.lock` manually
- Use `requirements.txt` (this project uses `pyproject.toml`)

### Always:

- Use `uv add <package>` for adding new dependencies
- Use `uv remove <package>` for removing dependencies
- Use `uv sync` to sync the environment with pyproject.toml
- Keep `uv.lock` in version control for reproducible builds

## Code Quality and Pre-commit Checks

**ALWAYS** ensure code quality by running pre-commit checks after modifications:

1. **After any code changes**: Run the comprehensive checks script
2. **Before committing**: Ensure all pre-commit hooks pass
3. **Format code**: Use Black and isort for consistent formatting
4. **Lint code**: Use Ruff for fast linting and auto-fixing
5. **Type check**: Use mypy for static type checking
6. **Security scan**: Use bandit for vulnerability detection

### Example workflow:

```bash
# 1. Make your code changes
# 2. Run comprehensive checks
bash scripts/run-checks.sh

# 3. If issues found, fix them:
./.venv/bin/python -m black .           # Format code
./.venv/bin/python -m isort .           # Sort imports
./.venv/bin/python -m ruff check --fix . # Fix linting issues
./.venv/bin/python -m mypy mcp_server/  # Check types

# 4. Run checks again to ensure everything passes
bash scripts/run-checks.sh
```

### Pre-commit Hooks (Optional but Recommended):

```bash
# Install pre-commit hooks
./.venv/bin/python -m pre_commit install

# Run pre-commit on all files
./.venv/bin/python -m pre_commit run --all-files
```

### Never:

- Commit code without running quality checks
- Ignore linting or type checking errors
- Skip security scanning with bandit
- Leave formatting inconsistencies

### Always:

- Run `bash scripts/run-checks.sh` after code changes
- Fix any issues found by the checks
- Ensure Black formatting is applied
- Verify imports are properly sorted with isort
- Check that mypy type checking passes
- Confirm bandit security scan passes

## Project Structure

- **Configuration**: Use `pyproject.toml` for all Python project configuration
- **Dependencies**: All dependencies must be declared in `pyproject.toml`
- **Virtual Environment**: Use the `.venv` directory created by `uv`
- **Lock File**: Keep `uv.lock` updated and committed
- **Code Quality**: All code must pass pre-commit checks

## Code Style

- Follow existing code patterns in the codebase
- Use type hints where appropriate
- Add docstrings for new functions and classes
- Update `NEWS.md` for significant changes
- Update `README.md` for user-facing changes
- **ALWAYS** run quality checks before considering work complete 